<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Just Do It</title>
        <link>http://example.org/posts/</link>
        <description>All Posts | Just Do It</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>gqiang9512@163.com (gqiang)</managingEditor>
            <webMaster>gqiang9512@163.com (gqiang)</webMaster><lastBuildDate>Sun, 21 Aug 2022 18:56:21 &#43;0800</lastBuildDate><atom:link href="http://example.org/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Mybatis源码学习之搭建查询示例代码</title>
    <link>http://example.org/posts/mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%90%AD%E5%BB%BA%E6%9F%A5%E8%AF%A2%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/</link>
    <pubDate>Sun, 21 Aug 2022 18:56:21 &#43;0800</pubDate>
    <author>gqiang</author>
    <guid>http://example.org/posts/mybatis%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%90%AD%E5%BB%BA%E6%9F%A5%E8%AF%A2%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/</guid>
    <description><![CDATA[一、源码下载 到mybatis的官网进行源码下载：https://mybatis.org/mybatis-3/
下载Source code包，下载后解压，该项目是一个maven项目，我们用idea打开。
二、Demo项目 1、在源码工程（org.apache.ibatis）下创建一个demo目录，存放我们的demo代码（Employee、MybatisMain）
@Data public class Employee { private Long id; private String username; private String name; private String password; private String phone; private String sex; private String idNumber; private Integer status; private LocalDateTime createTime; private LocalDateTime updateTime; } public class MybatisMain { public static void main(String[] args) throws IOException { String resource = &#34;mybatis-config.xml&#34;; InputStream inputStream = Resources.getResourceAsStream(resource); //將配置文件中的配置内容加載進Configuration對象中 SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession sqlSession = sqlSessionFactory.]]></description>
</item>
<item>
    <title>设计模式之模板模式</title>
    <link>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 21 Aug 2022 18:55:09 &#43;0800</pubDate>
    <author>gqiang</author>
    <guid>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[一、模板方法模式 1.概述 ​	在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。
​	例如，去银行办理业务一般要经过以下4个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。
定义：
​	定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。
2.结构 模板方法（Template Method）模式包含以下主要角色：
抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。
模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。
基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三种：
抽象方法(Abstract Method) ：一个抽象方法由抽象类声明、由其具体子类实现。
具体方法(Concrete Method) ：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。
钩子方法(Hook Method) ：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。
一般钩子方法是用于判断的逻辑方法，这类方法名一般为isXxx，返回值类型为boolean类型。
具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。
3.案例 代码如下
public abstract class AbstractClass { public final void cookProcess() { //第一步：倒油 this.pourOil(); //第二步：热油 this.heatOil(); //第三步：倒蔬菜 this.pourVegetable(); //第四步：倒调味料 this.pourSauce(); //第五步：翻炒 this.fry(); } public void pourOil() { System.out.println(&#34;倒油&#34;); } //第二步：热油是一样的，所以直接实现 public void heatOil() { System.out.println(&#34;热油&#34;); } //第三步：倒蔬菜是不一样的（一个下包菜，一个是下菜心） public abstract void pourVegetable(); //第四步：倒调味料是不一样 public abstract void pourSauce(); //第五步：翻炒是一样的，所以直接实现 public void fry(){ System.]]></description>
</item>
<item>
    <title>设计模式之观察者模式</title>
    <link>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 21 Aug 2022 18:55:00 &#43;0800</pubDate>
    <author>gqiang</author>
    <guid>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[观察者模式 1.概念 ​	又被称为发布-订阅（Publish/Subscribe）模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。
2.结构 在观察者模式中有如下角色：
Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。 ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。 Observer：抽象观察者，是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。 ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。 3.案例 微信公众号
​	在使用微信公众号时，大家都会有这样的体验，当你关注的公众号中有新内容更新的话，它就会推送给关注公众号的微信用户端。我们使用观察者模式来模拟这样的场景，微信用户就是观察者，微信公众号是被观察者，有多个的微信用户关注了程序猿这个公众号。
代码如下：
定义抽象观察者类，里面定义一个更新的方法
public interface Observer { void update(String message); } 定义具体观察者类，微信用户是观察者，里面实现了更新的方法
public class WeixinUser implements Observer { // 微信用户名 private String name; public WeixinUser(String name) { this.name = name; } @Override public void update(String message) { System.out.println(name + &#34;-&#34; + message); } } 定义抽象主题类，提供了attach、detach、notify三个方法
public interface Subject { //增加订阅者 public void attach(Observer observer); //删除订阅者 public void detach(Observer observer); //通知订阅者更新消息 public void notify(String message); } 微信公众号是具体主题（具体被观察者），里面存储了订阅该公众号的微信用户，并实现了抽象主题中的方法]]></description>
</item>
<item>
    <title>设计模式之桥接模式</title>
    <link>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 21 Aug 2022 18:54:12 &#43;0800</pubDate>
    <author>gqiang</author>
    <guid>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[桥接模式 1.概念 ​	现在有一个需求，需要创建不同的图形，并且每个图形都有可能会有不同的颜色。我们可以利用继承的方式来设计类的关系：
​	我们可以发现有很多的类，假如我们再增加一个形状或再增加一种颜色，就需要创建更多的类。
​	试想，在一个有多种可能会变化的维度的系统中，用继承方式会造成类爆炸，扩展起来不灵活。每次在一个维度上新增一个具体实现都要增加多个子类。为了更加灵活的设计系统，我们此时可以考虑使用桥接模式。
定义：
​	将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。
2.结构 桥接（Bridge）模式包含以下主要角色：
抽象化（Abstraction）角色 ：定义抽象类，并包含一个对实现化对象的引用。 扩展抽象化（Refined Abstraction）角色 ：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。 实现化（Implementor）角色 ：定义实现化角色的接口，供扩展抽象化角色调用。 具体实现化（Concrete Implementor）角色 ：给出实现化角色接口的具体实现。 3.案例 【例】视频播放器
​	需要开发一个跨平台视频播放器，可以在不同操作系统平台（如Windows、Mac、Linux等）上播放多种格式的视频文件，常见的视频格式包括RMVB、AVI、WMV等。该播放器包含了两个维度，适合使用桥接模式。
类图如下：
代码如下：
//视频文件 public interface VideoFile { void decode(String fileName); } //avi文件 public class AVIFile implements VideoFile { public void decode(String fileName) { System.out.println(&#34;avi视频文件：&#34;+ fileName); } } //rmvb文件 public class REVBBFile implements VideoFile { public void decode(String fileName) { System.out.println(&#34;rmvb文件：&#34; + fileName); } } //操作系统版本 public abstract class OperatingSystemVersion { protected VideoFile videoFile; public OperatingSystemVersion(VideoFile videoFile) { this.]]></description>
</item>
<item>
    <title>设计模式之原型模式</title>
    <link>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 21 Aug 2022 18:53:26 &#43;0800</pubDate>
    <author>gqiang</author>
    <guid>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[原型模式 1.概念 ​	用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。
2.结构 原型模式包含如下角色：
抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。 具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。 访问类：使用具体原型类中的 clone() 方法来复制新的对象。 接口类图如下：
3.案例 ​	同一学校的“三好学生”奖状除了获奖人姓名不同，其他都相同，可以使用原型模式复制多个“三好学生”奖状出来，然后在修改奖状上的名字即可。
类图如下：
代码如下：
//奖状类 public class Citation implements Cloneable { private String name; public void setName(String name) { this.name = name; } public String getName() { return (this.name); } public void show() { System.out.println(name + &#34;同学：在2020学年第一学期中表现优秀，被评为三好学生。特发此状！&#34;); } @Override public Citation clone() throws CloneNotSupportedException { return (Citation) super.clone(); } } //测试访问类 public class CitationTest { public static void main(String[] args) throws CloneNotSupportedException { Citation c1 = new Citation(); c1.]]></description>
</item>
<item>
    <title>设计模式之单例模式</title>
    <link>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 21 Aug 2022 18:53:02 &#43;0800</pubDate>
    <author>gqiang</author>
    <guid>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[单例模式 1.概念 ​	这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。
2.结构 单例模式的主要有以下角色：
单例类。只能创建一个实例的类 访问类。使用单例类 3.案例 单例设计模式分类两种：
​	饿汉式：类加载就会导致该单实例对象被创建
​	懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建
3.1饿汉式-方式1 public class Singleton { //私有构造方法 private Singleton() {} //在成员位置创建该类的对象 private static Singleton instance = new Singleton(); //对外提供静态方法获取该对象 public static Singleton getInstance() { return instance; } } 说明：
​	该方式在成员位置声明Singleton类型的静态变量，并创建Singleton类的对象instance。instance对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。
3.2 饿汉式-方式2 public class Singleton { //私有构造方法 private Singleton() {} //在成员位置创建该类的对象 private static Singleton instance; static { instance = new Singleton(); } //对外提供静态方法获取该对象 public static Singleton getInstance() { return instance; } } 说明：]]></description>
</item>
<item>
    <title>设计模式之设计原则</title>
    <link>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</link>
    <pubDate>Sun, 21 Aug 2022 18:52:42 &#43;0800</pubDate>
    <author>gqiang</author>
    <guid>http://example.org/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</guid>
    <description><![CDATA[设计原则 在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。
1 开闭原则 对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。
想要达到这样的效果，我们需要使用接口和抽象类。
因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。
下面以 搜狗输入法 的皮肤为例介绍开闭原则的应用。
【例】搜狗输入法 的皮肤设计。
分析：搜狗输入法 的皮肤是输入法背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的输入法的皮肤，也可以从网上下载新的皮肤。这些皮肤有共同的特点，可以为其定义一个抽象类（AbstractSkin），而每个具体的皮肤（DefaultSpecificSkin和HeimaSpecificSkin）是其子类。用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的。
2 里氏代换原则 里氏代换原则是面向对象设计的基本原则之一。
里氏代换原则：任何基类可以出现的地方，子类一定可以出现。通俗理解：子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。
如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。
下面看一个里氏替换原则中经典的一个例子
【例】正方形不是长方形。
在数学领域里，正方形毫无疑问是长方形，它是一个长宽相等的长方形。所以，我们开发的一个与几何图形相关的软件系统，就可以顺理成章的让正方形继承自长方形。
代码如下：
长方形类（Rectangle）：
public class Rectangle { private double length; private double width; public double getLength() { return length; } public void setLength(double length) { this.length = length; } public double getWidth() { return width; } public void setWidth(double width) { this.width = width; } } 正方形（Square）：
由于正方形的长和宽相同，所以在方法setLength和setWidth中，对长度和宽度都需要赋相同值。
public class Square extends Rectangle { public void setWidth(double width) { super.]]></description>
</item>
<item>
    <title>注解@RequestBody</title>
    <link>http://example.org/posts/%E6%B3%A8%E8%A7%A3requestbody/</link>
    <pubDate>Mon, 15 Aug 2022 15:12:42 &#43;0800</pubDate>
    <author>gqiang</author>
    <guid>http://example.org/posts/%E6%B3%A8%E8%A7%A3requestbody/</guid>
    <description><![CDATA[@RequestBody注解 作用： i) 该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上；
ii) 再把HttpMessageConverter返回的对象数据绑定到 controller种方法的参数上。
大白话：将json格式的数据转为JavaBean对象。]]></description>
</item>
<item>
    <title>注解@Data</title>
    <link>http://example.org/posts/%E6%B3%A8%E8%A7%A3data/</link>
    <pubDate>Mon, 15 Aug 2022 15:12:24 &#43;0800</pubDate>
    <author>gqiang</author>
    <guid>http://example.org/posts/%E6%B3%A8%E8%A7%A3data/</guid>
    <description><![CDATA[注解@Data ​	@Data注解是lombok.jar包下的注解，该注解通常用在实体bean上，不需要写出set和get方法，但是具备实体bean所具备的方法，简化编程提高变成速度。注意：项目中一定要引入lombok.jar
作用： 能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法，提高了一定的开发效率 让代码变得简洁，不用过多的去关注相应的方法 属性做修改时，也简化了维护为这些属性所生成的getter/setter方法等 使用 在maven中添加lombok的依赖 注在类上 ]]></description>
</item>
<item>
    <title>注解@value</title>
    <link>http://example.org/posts/%E6%B3%A8%E8%A7%A3value/</link>
    <pubDate>Mon, 15 Aug 2022 15:12:12 &#43;0800</pubDate>
    <author>gqiang</author>
    <guid>http://example.org/posts/%E6%B3%A8%E8%A7%A3value/</guid>
    <description><![CDATA[注解@value ​	@Value的作用是通过注解将常量、配置文件中的值、其他bean的属性值注入到变量中，作为变量的初始值。
使用 （1）常量注入 例如：
例1：@Value(&quot;normal&quot;)
private String normal; // 注入普通字符串
例2：@Value(&quot;classpath:com/hry/spring/configinject/config.txt&quot;)
private Resource resourceFile; // 注入文件资源
例3：@Value(&quot;http://www.baidu.com&quot;)
private Resource testUrl; // 注入URL资源
（2）bean属性、系统属性、表达式注入@Value(&quot;#{}&quot;) ​	bean属性注入需要注入者和被注入者属于同一个IOC容器，或者父子IOC容器关系，在同一个作用域内。
例1：@Value(&quot;#{beanInject.another}&quot;)
​	private String fromAnotherBean; // 注入其他Bean属性：注入beanInject对象的属性another
例2：@Value(&quot;#{systemProperties['os.name']}&quot;)
​	private String systemPropertiesName; // 注入操作系统属性
例3：@Value(&quot;#{ T(java.lang.Math).random() * 100.0 }&quot;)
​	private double randomNumber; //注入表达式结果
（3）配置文件属性注入@Value(&quot;${}&quot;) ​	@Value(&quot;#{}&quot;)读取配置文件中的值，注入到变量中去。配置文件分为默认配置文件application.properties和自定义配置文件
application.properties。application.properties在spring boot启动时默认加载此文件
自定义属性文件。自定义属性文件通过@PropertySource加载。@PropertySource可以同时加载多个文件，也可以加载单个文件。如果相同第一个属性文件和第二属性文件存在相同key，则最后一个属性文件里的key启作用。加载文件的路径也可以配置变量，如下文的${anotherfile.configinject}，此值定义在第一个属性文件config.properties]]></description>
</item>
</channel>
</rss>
